{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nlet apolloClient;\n\nfunction createApolloClient() {\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    // const token = getToken();\n    const token = process.env.NEXT_PUBLIC_GITHUB_AUTH_TOKEN;\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        authorization: token ? `Bearer ${token}` : ''\n      })\n    };\n  });\n  const httpLink = new HttpLink({\n    uri: process.env.NEXT_PUBLIC_APOLLO_GITHUB_CLIENT_URL,\n    // Server URL (must be absolute)\n    credentials: 'same-origin'\n  });\n  return new ApolloClient({\n    ssrMode: true,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/bryan/OneDrive/Documents/Apple/snapshot/frontend/apollo/github.client.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","setContext","apolloClient","createApolloClient","authLink","_","headers","token","process","env","NEXT_PUBLIC_GITHUB_AUTH_TOKEN","authorization","httpLink","uri","NEXT_PUBLIC_APOLLO_GITHUB_CLIENT_URL","credentials","ssrMode","link","concat","cache","initializeApollo","initialState","_apolloClient","existingCache","extract","restore","useApollo","store"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,QAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoB;AAC9C;AACA,UAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAA1B;AAEA,WAAO;AACLJ,MAAAA,OAAO,kCACFA,OADE;AAELK,QAAAA,aAAa,EAAEJ,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,KAAP;AAMD,GAV0B,CAA3B;AAWA,QAAMK,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAC5Bc,IAAAA,GAAG,EAAEL,OAAO,CAACC,GAAR,CAAYK,oCADW;AAC2B;AACvDC,IAAAA,WAAW,EAAE;AAFe,GAAb,CAAjB;AAKA,SAAO,IAAIjB,YAAJ,CAAiB;AACtBkB,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAEb,QAAQ,CAACc,MAAT,CAAgBN,QAAhB,CAFgB;AAGtBO,IAAAA,KAAK,EAAE,IAAInB,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,SAASoB,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGpB,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIkB,YAAJ,EAAkB;AAChB;AACA,UAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAGhB;AACA;;;AACAF,IAAAA,aAAa,CAACH,KAAd,CAAoBM,OAApB,iCAAiCF,aAAjC,GAAmDF,YAAnD;AACD,GAXmD,CAYpD;;;AACA,YAAmC,OAAOC,aAAP,CAbiB,CAcpD;;AACA,MAAI,CAACpB,YAAL,EAAmBA,YAAY,GAAGoB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASI,SAAT,CAAmBL,YAAnB,EAAiC;AACtC,QAAMM,KAAK,GAAG9B,OAAO,CAAC,MAAMuB,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOM,KAAP;AACD","sourcesContent":["import { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nlet apolloClient;\n\nfunction createApolloClient() {\n  const authLink = setContext((_, { headers }) => {\n    // const token = getToken();\n    const token = process.env.NEXT_PUBLIC_GITHUB_AUTH_TOKEN;\n\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n  const httpLink = new HttpLink({\n    uri: process.env.NEXT_PUBLIC_APOLLO_GITHUB_CLIENT_URL, // Server URL (must be absolute)\n    credentials: 'same-origin',\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore({ ...existingCache, ...initialState });\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}