{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport moment from 'moment';\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar';\nimport { events } from './data';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport CreateOrUpdateEvent from './CreateOrUpdateEvent';\nconst localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\n\nfunction CalendarApp() {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [actionType, setActionType] = React.useState('create');\n  const [event, setEvent] = React.useState(null);\n  const [state, setState] = React.useState({\n    events: events\n  });\n\n  function moveEvent({\n    event,\n    start,\n    end,\n    isAllDay: droppedOnAllDaySlot\n  }) {\n    const {\n      events\n    } = state;\n    const idx = events.indexOf(event);\n    let allDay = event.allDay;\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true;\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false;\n    }\n\n    const updatedEvent = _objectSpread(_objectSpread({}, event), {}, {\n      start,\n      end,\n      allDay\n    });\n\n    const nextEvents = [...events];\n    nextEvents.splice(idx, 1, updatedEvent);\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      events: nextEvents\n    })); // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n  }\n\n  function resizeEvent({\n    event,\n    start,\n    end\n  }) {\n    const {\n      events\n    } = state;\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id == event.id ? _objectSpread(_objectSpread({}, existingEvent), {}, {\n        start,\n        end\n      }) : existingEvent;\n    });\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      events: nextEvents\n    })); //alert(`${event.title} was resized to ${start}-${end}`)\n  }\n\n  function newEvent(event) {\n    let idList = state.events.map(a => a.id);\n    let newId = Math.max(...idList) + 1;\n    let hour = {\n      id: newId,\n      title: event.title,\n      allDay: event.slots.length == 1,\n      desc: event.desc,\n      start: event.slots.length == 1 ? event.start : event.slots[0],\n      end: event.slots.length == 1 ? event.end : event.slots[1]\n    };\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      events: state.events.concat([hour])\n    }));\n    return;\n  }\n\n  function updateEvent(event) {\n    let updatedEvent = {\n      id: event.id,\n      title: event.title,\n      allDay: event.slots.length == 1,\n      desc: event.desc,\n      start: event.slots.length == 1 ? event.start : event.slots[0],\n      end: event.slots.length == 1 ? event.end : event.slots[1]\n    };\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      events: state.events.map(item => item.id === updatedEvent.id ? updatedEvent : item)\n    }));\n    return;\n  }\n\n  function onSubmit(value) {\n    setIsOpen(false);\n    setEvent(null);\n\n    if (actionType === 'create') {\n      newEvent(value);\n    }\n\n    if (actionType === 'update') {\n      updateEvent(value);\n    }\n  }\n\n  function onSelectEvent(selectedEvent) {\n    setIsOpen(true);\n    setEvent(selectedEvent);\n    setActionType('update');\n  }\n\n  function onSelectSlot(selectedSlot) {\n    setEvent(selectedSlot);\n    setActionType('create');\n    setIsOpen(true);\n  }\n\n  function close() {\n    setIsOpen(false);\n    setEvent(null);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(DragAndDropCalendar, {\n    popup: true,\n    selectable: true,\n    localizer: localizer,\n    events: state.events,\n    onEventDrop: moveEvent,\n    resizable: true,\n    onEventResize: resizeEvent,\n    onSelectSlot: onSelectSlot,\n    onSelectEvent: onSelectEvent,\n    onDragStart: console.log,\n    defaultView: Views.MONTH,\n    defaultDate: new Date()\n  }), event && __jsx(CreateOrUpdateEvent, {\n    onClose: close,\n    isOpen: isOpen,\n    event: event,\n    type: actionType,\n    onSubmit: value => onSubmit(value)\n  }));\n}\n\nexport default CalendarApp;","map":null,"metadata":{},"sourceType":"module"}