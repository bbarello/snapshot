{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { toaster } from 'baseui/toast';\nimport { Block } from 'baseui/block';\nimport { Button } from 'baseui/button';\nimport Loader from '../../components/UiElements/Loader/Loader';\nimport Toaster from '../../components/UiElements/Toaster/Toaster';\nimport AddEditModal from './AddEdit';\nimport { getDocuments, addDocument, updateDocument, deleteDocument, addCollectionAndDocuments } from '../../firebase/service';\nimport demoData from './demo.data';\nimport { getTimeStamp } from '../../firebase/initialize';\nimport CrudTable from './CrudTable';\nconst statusOptions = [{\n  label: 'Draft',\n  id: 'draft'\n}, {\n  label: 'Publish',\n  id: 'publish'\n}];\nconst TITLE = 'Firebase CRUD';\nconst SUB_TITLE = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod';\n\nconst FirebaseCRUD = () => {\n  let toastKey;\n  const {\n    0: articles,\n    1: setArticles\n  } = useState([]);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: editState,\n    1: setEditState\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: article,\n    1: setArticle\n  } = useState({\n    id: null,\n    title: '',\n    description: '',\n    slug: '',\n    status: []\n  });\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const data = await getDocuments('articles'); //for demo only\n\n      if (!data.length) {\n        addCollectionAndDocuments('articles', demoData.map(data => _objectSpread(_objectSpread({}, data), {}, {\n          createdAt: getTimeStamp()\n        })));\n      }\n\n      setArticles(data);\n      setLoading(false);\n    } catch (error) {\n      toastKey = toaster.negative(__jsx(React.Fragment, null, 'Data Fetching Failed!'), {\n        autoHideDuration: 1000\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleAddArticle = () => {\n    setVisible(true);\n    setEditState(false);\n    setArticle({\n      id: null,\n      title: '',\n      description: '',\n      slug: '',\n      status: []\n    });\n  };\n\n  const handleModdalClose = () => {\n    setVisible(false);\n    setArticle({\n      id: null,\n      title: '',\n      description: '',\n      slug: '',\n      status: []\n    });\n  };\n\n  const handleDeleteArticle = async id => {\n    if (id) {\n      try {\n        const deleted = await deleteDocument('articles', id);\n        toastKey = toaster.info(__jsx(React.Fragment, null, 'Deleted Successfully!'), {\n          autoHideDuration: 2000\n        });\n\n        if (deleted) {\n          fetchData();\n        }\n      } catch (error) {\n        console.log(error);\n        toastKey = toaster.info(__jsx(React.Fragment, null, 'Deletion Failed!'), {\n          autoHideDuration: 2000\n        });\n      }\n    }\n  };\n\n  const handleUpdateArticle = async item => {\n    setVisible(true);\n    setEditState(true);\n    const index = statusOptions.findIndex(option => option.id === item.status);\n    let status = {\n      label: 'Draft',\n      id: 'draft'\n    };\n\n    if (index > -1) {\n      status = statusOptions[index];\n    }\n\n    setArticle(_objectSpread(_objectSpread(_objectSpread({}, article), item), {}, {\n      status\n    }));\n  };\n\n  const handleOnChange = name => e => {\n    let value;\n\n    if (name === 'status') {\n      value = e.value;\n    } else {\n      value = e.target.value;\n    }\n\n    setArticle(_objectSpread(_objectSpread({}, article), {}, {\n      [name]: value\n    }));\n  };\n\n  const checkError = () => {\n    let errorStatus = false;\n    const {\n      title,\n      description,\n      slug,\n      status\n    } = article;\n\n    if (!title || !description || !slug || !status) {\n      errorStatus = true;\n    } else {\n      errorStatus = false;\n    }\n\n    setError(errorStatus);\n    return errorStatus;\n  };\n\n  const handleOnSubmit = async () => {\n    const errorStatus = checkError();\n    const status = article.status && article.status.length ? article.status[0].id : 'draft';\n    const slug = article.id ? article.slug : `${article.slug}-${Date.now()}`;\n\n    const data = _objectSpread(_objectSpread({}, article), {}, {\n      slug,\n      status\n    });\n\n    let id = null;\n\n    if (article.id && !errorStatus) {\n      try {\n        id = await updateDocument('articles', data);\n        toastKey = toaster.info(__jsx(React.Fragment, null, 'Update Successful!'), {\n          autoHideDuration: 2000\n        });\n      } catch (error) {\n        toastKey = toaster.negative(__jsx(React.Fragment, null, 'Update Failed!'), {\n          autoHideDuration: 2000\n        });\n        console.log(error);\n      }\n\n      setVisible(false);\n    } else if (!article.id && !errorStatus) {\n      try {\n        id = await addDocument('articles', data);\n        toastKey = toaster.info(__jsx(React.Fragment, null, 'Successful!'), {\n          autoHideDuration: 2000\n        });\n      } catch (error) {\n        toastKey = toaster.negative(__jsx(React.Fragment, null, 'Failed!'), {\n          autoHideDuration: 2000\n        });\n        console.log(error);\n      }\n\n      setVisible(false);\n    }\n\n    if (id) {\n      fetchData();\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Toaster, {\n    toastKey: toastKey\n  }), __jsx(Block, {\n    paddingTop: ['10px', '10px', 0],\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          marginBottom: '40px'\n        }\n      }\n    }\n  }, __jsx(Block, null, __jsx(Block, {\n    as: \"h3\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font450), {}, {\n            color: $theme.colors.primaryA,\n            marginBottom: '10px'\n          });\n        }\n      }\n    }\n  }, TITLE), __jsx(Block, {\n    as: \"p\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font200), {}, {\n            color: $theme.colors.contentSecondary\n          });\n        }\n      }\n    }\n  }, SUB_TITLE)), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          flexShrink: 0\n        }\n      }\n    }\n  }, __jsx(Button, {\n    onClick: handleAddArticle,\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font250);\n        }\n      }\n    }\n  }, \"Add Article\"))), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          minHeight: '150px'\n        }\n      }\n    }\n  }, loading ? __jsx(Loader, null) : __jsx(CrudTable, {\n    data: articles,\n    onUpdate: handleUpdateArticle,\n    onDelete: handleDeleteArticle\n  })), __jsx(AddEditModal, {\n    error: error,\n    article: article,\n    visible: visible,\n    editState: editState,\n    statusOptions: statusOptions,\n    handleOnChange: handleOnChange,\n    handleOnSubmit: handleOnSubmit,\n    handleModdalClose: handleModdalClose\n  }));\n};\n\nexport default FirebaseCRUD;","map":null,"metadata":{},"sourceType":"module"}