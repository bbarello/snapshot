{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/bryanbarello/snapshot/frontend/apollo/client.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';\nvar globalApolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _yield$import, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree; // Initialize ApolloClient, add it to the ctx object so\n                // we can use it in `PageComponent.getInitialProp`.\n\n                apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 5;\n                return PageComponent.getInitialProps(ctx);\n\n              case 5:\n                _context.t0 = _context.sent;\n                _context.next = 9;\n                break;\n\n              case 8:\n                _context.t0 = {};\n\n              case 9:\n                pageProps = _context.t0;\n\n                if (!false) {\n                  _context.next = 27;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", pageProps);\n\n              case 13:\n                if (!ssr) {\n                  _context.next = 27;\n                  break;\n                }\n\n                _context.prev = 14;\n                _context.next = 17;\n                return import('@apollo/client/react/ssr');\n\n              case 17:\n                _yield$import = _context.sent;\n                getDataFromTree = _yield$import.getDataFromTree;\n                _context.next = 21;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloClient: apolloClient\n                  }),\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 15\n                  }\n                }));\n\n              case 21:\n                _context.next = 26;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t1 = _context[\"catch\"](14);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error('Error while running `getDataFromTree`', _context.t1);\n\n              case 26:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 27:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloState: apolloState\n                }));\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[14, 23]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var httpLink = new HttpLink({\n    uri: process.env.NEXT_PUBLIC_APOLLO_CLIENT_URL,\n    // Server URL (must be absolute)\n    credentials: 'same-origin'\n  });\n  var ssrMode = false;\n  var cache = new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          // Reusable helper function to generate a field\n          // policy for the Query.products field.\n          products: {\n            keyArgs: false,\n            merge: function merge(existing, incoming) {\n              var newItems = incoming.items;\n              return existing ? _objectSpread(_objectSpread({}, incoming), {}, {\n                items: [].concat(_toConsumableArray(existing.items), _toConsumableArray(newItems))\n              }) : incoming;\n            }\n          }\n        }\n      }\n    }\n  }).restore(initialState);\n  return new ApolloClient({\n    ssrMode: ssrMode,\n    link: httpLink,\n    cache: cache\n  });\n}","map":{"version":3,"sources":["/Users/bryanbarello/snapshot/frontend/apollo/client.js"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","httpLink","uri","process","env","NEXT_PUBLIC_APOLLO_CLIENT_URL","credentials","ssrMode","typePolicies","Query","fields","products","keyArgs","merge","existing","incoming","newItems","items","restore","link"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n} from '@apollo/client';\n\nlet globalApolloClient = null;\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const { AppTree } = ctx;\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient());\n\n      // Run wrapped getInitialProps methods\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\n              '@apollo/client/react/ssr'\n            );\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind();\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const httpLink = new HttpLink({\n    uri: process.env.NEXT_PUBLIC_APOLLO_CLIENT_URL, // Server URL (must be absolute)\n    credentials: 'same-origin',\n  });\n\n  const ssrMode = typeof window === 'undefined';\n  const cache = new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          // Reusable helper function to generate a field\n          // policy for the Query.products field.\n          products: {\n            keyArgs: false,\n            merge(existing, incoming) {\n              const { items: newItems } = incoming;\n              return existing\n                ? {\n                    ...incoming,\n                    items: [...existing.items, ...newItems],\n                  }\n                : incoming;\n            },\n          },\n        },\n      },\n    },\n  }).restore(initialState);\n  return new ApolloClient({\n    ssrMode,\n    link: httpLink,\n    cache,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}