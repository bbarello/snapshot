{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { getIn, FormikConsumer } from 'formik';\nimport { Input } from 'baseui/input';\nimport { Textarea } from 'baseui/textarea';\nimport { Checkbox } from 'baseui/checkbox';\nimport { RadioGroup, Radio } from 'baseui/radio';\nimport { Datepicker } from 'baseui/datepicker';\nimport { Select } from 'baseui/select';\nexport default function Field({\n  field,\n  name\n}) {\n  return __jsx(FormikConsumer, null, formikProps => {\n    const {\n      errors,\n      touched,\n      values\n    } = formikProps;\n    const error = getIn(errors, name);\n    const isTouched = !!getIn(touched, name);\n    const value = getIn(values, name);\n    return __jsx(FieldSwitch, _extends({\n      name: name,\n      field: field,\n      hasError: isTouched && !!error,\n      isValid: !error && isTouched,\n      value: value\n    }, formikProps));\n  });\n}\n\nfunction FieldSwitch({\n  name,\n  field,\n  handleChange,\n  setFieldValue,\n  setFieldTouched,\n  value\n}) {\n  const onBlur = () => setFieldTouched(name);\n\n  switch (field.type) {\n    case 'text':\n      {\n        return __jsx(Input, {\n          name: name,\n          value: value,\n          onChange: e => setFieldValue(name, e.target.value),\n          onBlur: onBlur,\n          overrides: {\n            InputContainer: {\n              style: () => {\n                return {\n                  backgroundColor: 'transparent'\n                };\n              }\n            }\n          }\n        });\n      }\n\n    case 'textarea':\n      {\n        return __jsx(Textarea, {\n          name: name,\n          value: value,\n          onChange: e => setFieldValue(name, e.target.value),\n          onBlur: onBlur,\n          overrides: {\n            InputContainer: {\n              style: () => {\n                return {\n                  backgroundColor: 'transparent'\n                };\n              }\n            }\n          }\n        });\n      }\n\n    case 'integer':\n      {\n        return __jsx(Input, {\n          name: name,\n          value: value,\n          onChange: handleChange,\n          onBlur: onBlur,\n          type: \"number\",\n          overrides: {\n            InputContainer: {\n              style: () => {\n                return {\n                  backgroundColor: 'transparent'\n                };\n              }\n            }\n          }\n        });\n      }\n\n    case 'checkbox':\n      {\n        const {\n          checkboxLabel\n        } = field;\n        return __jsx(Checkbox, {\n          checked: value,\n          onChange: e => setFieldValue(name, e.target.checked),\n          onBlur: onBlur\n        }, checkboxLabel);\n      }\n\n    case 'radio':\n      {\n        const {\n          options\n        } = field;\n        return __jsx(RadioGroup, {\n          value: value,\n          onChange: e => setFieldValue(name, e.target.value),\n          onBlur: onBlur\n        }, options.map(option => __jsx(Radio, {\n          key: option.value,\n          value: option.value\n        }, option.label)));\n      }\n\n    case 'date':\n      {\n        return __jsx(Datepicker, {\n          value: value,\n          onChange: ({\n            date\n          }) => setFieldValue(name, date)\n        });\n      }\n\n    case 'select':\n      {\n        const {\n          options\n        } = field;\n        return __jsx(Select, {\n          options: options,\n          value: value,\n          onChange: params => setFieldValue(name, params.value),\n          onBlur: onBlur,\n          overrides: {\n            ControlContainer: {\n              style: () => {\n                return {\n                  backgroundColor: 'transparent'\n                };\n              }\n            }\n          }\n        });\n      }\n\n    default:\n      return null;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}