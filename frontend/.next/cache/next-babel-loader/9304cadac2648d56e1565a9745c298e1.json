{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext, Fragment } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { Plus } from 'baseui/icon';\nimport { Input } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport { TodoList } from './TodoList';\nimport { AddListWrapper, AddButton } from './Todo.styled';\nimport { TodoContext } from './TodoContext';\nimport { Block } from 'baseui/block';\n/**\n * a little function to help us with reordering the result\n */\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\n * Add Todo Component\n */\n\n\nfunction AddTodo({\n  addTodo\n}) {\n  const [value, setValue] = React.useState('Hello');\n  return __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }\n    }\n  }, __jsx(Input, {\n    value: value,\n    onChange: event => setValue(event.currentTarget.value),\n    placeholder: \"Enter Your Todo\",\n    overrides: {\n      Root: {\n        style: {\n          minHeight: '54px'\n        }\n      }\n    }\n  }), __jsx(Button, {\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font250), {}, {\n            minWidth: '80px',\n            minHeight: '54px',\n            '@media only screen and (min-width: 481px)': {\n              minWidth: '130px'\n            }\n          });\n        }\n      }\n    },\n    onClick: () => addTodo(value)\n  }, \"Add\"));\n}\n\nfunction TodoApp({\n  status\n}) {\n  const {\n    todos,\n    setTodos,\n    addTodo\n  } = useContext(TodoContext);\n  const {\n    0: showInput,\n    1: setShowInput\n  } = useState(false);\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    const todosOrder = reorder(todos, result.source.index, result.destination.index);\n    setTodos(todosOrder);\n  };\n\n  let statusTodoList = [];\n\n  if (status === 'all') {\n    statusTodoList = todos;\n  } else {\n    statusTodoList = todos.filter(todo => todo.status === status);\n  }\n\n  return __jsx(Fragment, null, __jsx(DragDropContext, {\n    onDragEnd: onDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"list\"\n  }, provided => __jsx(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps), __jsx(TodoList, {\n    todos: statusTodoList\n  }), provided.placeholder))), __jsx(AddListWrapper, null, __jsx(AddButton, {\n    onClick: e => {\n      e.preventDefault();\n      setShowInput(!showInput);\n    }\n  }, __jsx(Plus, {\n    size: 24\n  }), __jsx(Block, {\n    as: \"span\",\n    paddingLeft: \"7px\",\n    paddingRight: \"7px\"\n  }, \"Add To Do List\")), showInput ? __jsx(AddTodo, {\n    addTodo: addTodo\n  }) : null));\n}\n\nexport default TodoApp;","map":null,"metadata":{},"sourceType":"module"}