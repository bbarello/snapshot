{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery {\\n\\t\\tinvoices {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tcustomer {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\taddress\\n\\t\\t\\t}\\n\\t\\t\\tvendor {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\taddress\\n\\t\\t\\t}\\n\\t\\t\\titems {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tunitPrice\\n\\t\\t\\t}\\n\\t\\t\\ttotal\\n\\t\\t\\tstatus\\n\\t\\t\\tcreatedAt\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmutation CreateInvoice($invoice: AddInvoiceInput!) {\\n\\t\\tcreateInvoice(data: $invoice) {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tcustomer {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\taddress\\n\\t\\t\\t}\\n\\t\\t\\tvendor {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\taddress\\n\\t\\t\\t}\\n\\t\\t\\t# items\\n\\t\\t\\ttotal\\n\\t\\t\\tstatus\\n\\t\\t\\tcreatedAt\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { useMutation, gql } from '@apollo/client';\nimport { Grid, Cell } from 'baseui/layout-grid';\nimport { Block } from 'baseui/block';\nimport { FormControl } from 'baseui/form-control';\nimport { Input } from 'baseui/input';\nimport { Select } from 'baseui/select';\nimport { Datepicker } from 'baseui/datepicker';\nimport { Button } from 'baseui/button';\nimport Container from 'components/UiElements/Container/Container';\nimport AppsMenu from 'components/SideMenu/AppsMenu';\nimport InvoiceItemTable from './InvoiceItemTable';\nimport { withApollo } from 'apollo/client';\nimport { v4 as uuidV4 } from 'uuid';\nvar ADD_INVOICE = gql(_templateObject());\nvar GET_INVOICES = gql(_templateObject2());\nvar statusOptions = [{\n  label: 'Pending',\n  id: 'pending'\n}, {\n  label: 'Shipped',\n  id: 'shipped'\n}, {\n  label: 'Delivered',\n  id: 'delivered'\n}];\n\nfunction calcLineItemsTotal(lineItems) {\n  return lineItems.reduce(function (prev, cur) {\n    return prev + cur.unit * cur.unitPrice;\n  }, 0);\n}\n\nvar AddInvoice = function AddInvoice() {\n  var _useMutation = useMutation(ADD_INVOICE, {\n    update: function update(cache, _ref) {\n      var createInvoice = _ref.data.createInvoice;\n\n      var _cache$readQuery = cache.readQuery({\n        query: GET_INVOICES\n      }),\n          invoices = _cache$readQuery.invoices;\n\n      cache.writeQuery({\n        query: GET_INVOICES,\n        data: {\n          invoices: invoices.concat([createInvoice])\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createInvoice = _useMutation2[0];\n\n  var router = useRouter();\n\n  var _useState = useState({\n    invoiceInfo: '',\n    orderStatus: [],\n    orderDate: null,\n    billTo: '',\n    billForm: '',\n    billToAddress: '',\n    billFormAddress: ''\n  }),\n      formState = _useState[0],\n      setFormState = _useState[1];\n\n  var _React$useState = React.useState([{\n    id: 1,\n    name: '',\n    unitPrice: 0,\n    unit: 1\n  }]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      lineItems = _React$useState2[0],\n      setLineItems = _React$useState2[1];\n\n  var handleAddLineItem = function handleAddLineItem() {\n    var idList = lineItems.map(function (a) {\n      return a.id;\n    });\n    var newId = Math.max.apply(Math, _toConsumableArray(idList)) + 1;\n    setLineItems(function (prev) {\n      return prev.concat([{\n        id: newId,\n        name: '',\n        unitPrice: 0,\n        unit: 1\n      }]);\n    });\n  };\n\n  var handleLineItemChange = function handleLineItemChange(elementIndex) {\n    return function (event) {\n      var updatedLineItems = lineItems.map(function (item, i) {\n        if (elementIndex !== i) return item;\n        return _objectSpread(_objectSpread({}, item), {}, _defineProperty({}, event.target.name, event.target.value));\n      });\n      setLineItems(updatedLineItems);\n    };\n  };\n\n  var handleRemoveLineItem = function handleRemoveLineItem(elementIndex) {\n    return function (event) {\n      setLineItems(lineItems.filter(function (item, i) {\n        return elementIndex !== i;\n      }));\n    };\n  };\n\n  var handleOnChange = function handleOnChange(name) {\n    return function (e) {\n      var value;\n\n      if (name === 'orderStatus') {\n        value = e.value;\n      } else if (name === 'orderDate') {\n        value = e.date;\n      } else {\n        value = e.target.value;\n      }\n\n      setFormState(_objectSpread(_objectSpread({}, formState), {}, _defineProperty({}, name, value)));\n    };\n  };\n\n  function saveInvoice(_x) {\n    return _saveInvoice.apply(this, arguments);\n  }\n\n  function _saveInvoice() {\n    _saveInvoice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _formState$orderStatu;\n\n      var invoice;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              invoice = {\n                id: uuidV4(),\n                name: formState.invoiceInfo,\n                customer: {\n                  id: '13',\n                  name: formState.billTo,\n                  address: formState.billToAddress\n                },\n                vendor: {\n                  id: '14',\n                  name: formState.billForm,\n                  address: formState.billFormAddress\n                },\n                items: lineItems,\n                total: calcLineItemsTotal(lineItems),\n                status: formState === null || formState === void 0 ? void 0 : (_formState$orderStatu = formState.orderStatus[0]) === null || _formState$orderStatu === void 0 ? void 0 : _formState$orderStatu.id.toUpperCase(),\n                createdAt: formState.orderDate\n              };\n              console.log(invoice, 'newInvoice');\n              _context.next = 5;\n              return createInvoice({\n                variables: {\n                  invoice: invoice\n                }\n              });\n\n            case 5:\n              router.push('/apps/invoice');\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _saveInvoice.apply(this, arguments);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Add Invoice \"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: \"Inst create a invoice\"\n  })), __jsx(Container, null, __jsx(Block, {\n    paddingTop: ['0', '0', '0', '40px']\n  }, __jsx(Grid, {\n    gridColumns: 12,\n    gridGutters: 0,\n    gridMargins: 0\n  }, __jsx(Cell, {\n    span: [12, 12, 3]\n  }, __jsx(AppsMenu, null)), __jsx(Cell, {\n    span: [12, 12, 9]\n  }, __jsx(Block, {\n    paddingTop: ['10px', '10px', '20px', '0'],\n    marginLeft: \"-10px\",\n    marginRight: \"-10px\"\n  }, __jsx(\"form\", {\n    onSubmit: saveInvoice\n  }, __jsx(Grid, {\n    gridColumns: 12,\n    gridGutters: 20,\n    gridMargins: 0\n  }, __jsx(Cell, {\n    span: [12, 12, 6]\n  }, __jsx(FormControl, {\n    label: \"Invoice Info\",\n    overrides: {\n      Label: {\n        style: function style(_ref2) {\n          var $theme = _ref2.$theme;\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    }\n  }, __jsx(Input, {\n    value: formState.invoiceInfo,\n    onChange: handleOnChange('invoiceInfo'),\n    required: true,\n    overrides: {\n      InputContainer: {\n        style: function style() {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(Cell, {\n    span: [12, 12, 6]\n  }), __jsx(Cell, {\n    span: [12, 12, 6]\n  }, __jsx(FormControl, {\n    label: \"Order Status\",\n    overrides: {\n      Label: {\n        style: function style(_ref3) {\n          var $theme = _ref3.$theme;\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    }\n  }, __jsx(Select, {\n    options: statusOptions,\n    value: formState.orderStatus,\n    placeholder: \"\",\n    required: true,\n    onChange: handleOnChange('orderStatus'),\n    overrides: {\n      ControlContainer: {\n        style: function style() {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(Cell, {\n    span: [12, 12, 6]\n  }, __jsx(FormControl, {\n    label: \"Order Date\",\n    overrides: {\n      Label: {\n        style: function style(_ref4) {\n          var $theme = _ref4.$theme;\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    }\n  }, __jsx(Datepicker, {\n    value: formState.orderDate,\n    required: true,\n    onChange: handleOnChange('orderDate')\n  }))), __jsx(Cell, {\n    span: [12, 12, 6]\n  }, __jsx(FormControl, {\n    label: \"Bill To\",\n    overrides: {\n      Label: {\n        style: function style(_ref5) {\n          var $theme = _ref5.$theme;\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    }\n  }, __jsx(Input, {\n    value: formState.billTo,\n    onChange: handleOnChange('billTo'),\n    required: true,\n    overrides: {\n      InputContainer: {\n        style: function style() {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(Cell, {\n    span: [12, 12, 6]\n  }, __jsx(FormControl, {\n    label: \"Bill Form\",\n    overrides: {\n      Label: {\n        style: function style(_ref6) {\n          var $theme = _ref6.$theme;\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    }\n  }, __jsx(Input, {\n    value: formState.billForm,\n    onChange: handleOnChange('billForm'),\n    required: true,\n    overrides: {\n      InputContainer: {\n        style: function style() {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(Cell, {\n    span: [12, 12, 6]\n  }, __jsx(FormControl, {\n    label: \"Bill To Address\",\n    overrides: {\n      Label: {\n        style: function style(_ref7) {\n          var $theme = _ref7.$theme;\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    }\n  }, __jsx(Input, {\n    value: formState.billToAddress,\n    onChange: handleOnChange('billToAddress'),\n    required: true,\n    overrides: {\n      InputContainer: {\n        style: function style() {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(Cell, {\n    span: [12, 12, 6]\n  }, __jsx(FormControl, {\n    label: \"Bill Form Address\",\n    overrides: {\n      Label: {\n        style: function style(_ref8) {\n          var $theme = _ref8.$theme;\n          return _objectSpread({}, $theme.typography.font350);\n        }\n      }\n    }\n  }, __jsx(Input, {\n    value: formState.billFormAddress,\n    onChange: handleOnChange('billFormAddress'),\n    required: true,\n    overrides: {\n      InputContainer: {\n        style: function style() {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(Cell, {\n    span: 12\n  }, __jsx(InvoiceItemTable, {\n    items: lineItems,\n    onAddItem: handleAddLineItem,\n    onItemInputChange: handleLineItemChange,\n    onRemove: handleRemoveLineItem\n  })), __jsx(Cell, {\n    span: 12\n  }, __jsx(Block, {\n    marginTop: '25px'\n  }, __jsx(Button, {\n    type: \"submit\",\n    overrides: {\n      BaseButton: {\n        style: function style(_ref9) {\n          var $theme = _ref9.$theme;\n          return _objectSpread(_objectSpread({}, $theme.typography.font250), {}, {\n            minWidth: '130px'\n          });\n        }\n      }\n    }\n  }, \"Save\"), __jsx(Button, {\n    kind: \"minimal\",\n    type: \"button\",\n    overrides: {\n      BaseButton: {\n        style: function style(_ref10) {\n          var $theme = _ref10.$theme;\n          return _objectSpread(_objectSpread({}, $theme.typography.font250), {}, {\n            minWidth: '130px'\n          });\n        }\n      }\n    },\n    onClick: function onClick() {\n      return router.push('/apps/invoice');\n    }\n  }, \"Cancel\")))))))))));\n};\n\nexport default withApollo(AddInvoice);","map":null,"metadata":{},"sourceType":"module"}