{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState, Fragment } from 'react';\nimport { AiFillCloseSquare, AiOutlineEdit } from 'react-icons/ai';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Input } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport { Checkbox } from 'baseui/checkbox';\nimport { Grab } from 'baseui/icon';\nimport { Block } from 'baseui/block';\nimport { TodoContext } from './TodoContext';\nimport { TodoItemWrapper, TodoItem, EditButton, RemoveButton } from './Todo.styled';\n/**\n * Update Todo Component\n */\n\nfunction UpdateTodo({\n  todoItem,\n  updateTodo,\n  setShowInput\n}) {\n  const [value, setValue] = React.useState(todoItem.content);\n\n  const updateTodoItem = () => {\n    const updatedTodo = _objectSpread(_objectSpread({}, todoItem), {}, {\n      content: value\n    });\n\n    updateTodo(updatedTodo);\n    setShowInput(false);\n  };\n\n  return __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }\n    }\n  }, __jsx(Input, {\n    autoFocus: true,\n    value: value,\n    onChange: event => setValue(event.currentTarget.value),\n    placeholder: \"Enter Your Todo\",\n    overrides: {\n      Root: {\n        style: {\n          minHeight: '54px'\n        }\n      }\n    }\n  }), __jsx(Button, {\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font250), {}, {\n            minWidth: '80px',\n            minHeight: '54px',\n            '@media only screen and (min-width: 481px)': {\n              minWidth: '130px'\n            }\n          });\n        }\n      }\n    },\n    onClick: () => updateTodoItem()\n  }, \"Update\"));\n}\n\nfunction Todo({\n  todo,\n  index\n}) {\n  const {\n    updateTodo,\n    removeTodo\n  } = useContext(TodoContext);\n  const {\n    0: showInput,\n    1: setShowInput\n  } = useState(false);\n  const checked = todo.status === 'done' ? true : false;\n\n  const updateTodoStatus = status => {\n    const todoStatus = _objectSpread(_objectSpread({}, todo), {}, {\n      status: status === true ? 'done' : 'pending'\n    });\n\n    updateTodo(todoStatus);\n  };\n\n  return __jsx(Fragment, null, !showInput ? __jsx(Draggable, {\n    draggableId: todo.id,\n    index: index\n  }, provided => __jsx(TodoItem, _extends({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps), __jsx(TodoItemWrapper, null, __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }\n    }\n  }, __jsx(Grab, {\n    size: 24,\n    color: \"#545454\"\n  }), __jsx(Checkbox, {\n    checked: checked,\n    onChange: () => updateTodoStatus(!checked),\n    overrides: {\n      Root: {\n        style: {\n          paddingLeft: '10px',\n          paddingRight: '10px',\n          '@media only screen and (max-width: 480px)': {\n            alignItems: 'center'\n          }\n        }\n      }\n    }\n  }, todo.content)), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }\n    }\n  }, __jsx(EditButton, {\n    onClick: e => {\n      e.preventDefault();\n      setShowInput(!showInput);\n    }\n  }, __jsx(AiOutlineEdit, {\n    size: '24px'\n  })), __jsx(RemoveButton, {\n    onClick: e => {\n      e.preventDefault();\n      removeTodo(todo.id);\n    }\n  }, __jsx(AiFillCloseSquare, {\n    size: '24px'\n  })))))) : __jsx(UpdateTodo, {\n    todoItem: todo,\n    updateTodo: updateTodo,\n    setShowInput: setShowInput\n  }));\n}\n\nexport default Todo;","map":null,"metadata":{},"sourceType":"module"}