{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { getIn, FormikConsumer } from 'formik';\nimport { Input } from 'baseui/input';\nimport { Textarea } from 'baseui/textarea';\nimport { Checkbox } from 'baseui/checkbox';\nimport { RadioGroup, Radio } from 'baseui/radio';\nimport { Datepicker } from 'baseui/datepicker';\nimport { Select } from 'baseui/select';\nexport default function Field(_ref) {\n  var field = _ref.field,\n      name = _ref.name;\n  return __jsx(FormikConsumer, null, function (formikProps) {\n    var errors = formikProps.errors,\n        touched = formikProps.touched,\n        values = formikProps.values;\n    var error = getIn(errors, name);\n    var isTouched = !!getIn(touched, name);\n    var value = getIn(values, name);\n    return __jsx(FieldSwitch, _extends({\n      name: name,\n      field: field,\n      hasError: isTouched && !!error,\n      isValid: !error && isTouched,\n      value: value\n    }, formikProps));\n  });\n}\n\nfunction FieldSwitch(_ref2) {\n  var name = _ref2.name,\n      field = _ref2.field,\n      handleChange = _ref2.handleChange,\n      setFieldValue = _ref2.setFieldValue,\n      setFieldTouched = _ref2.setFieldTouched,\n      value = _ref2.value;\n\n  var onBlur = function onBlur() {\n    return setFieldTouched(name);\n  };\n\n  switch (field.type) {\n    case 'text':\n      {\n        return __jsx(Input, {\n          name: name,\n          value: value,\n          onChange: function onChange(e) {\n            return setFieldValue(name, e.target.value);\n          },\n          onBlur: onBlur,\n          overrides: {\n            InputContainer: {\n              style: function style() {\n                return {\n                  backgroundColor: 'transparent'\n                };\n              }\n            }\n          }\n        });\n      }\n\n    case 'textarea':\n      {\n        return __jsx(Textarea, {\n          name: name,\n          value: value,\n          onChange: function onChange(e) {\n            return setFieldValue(name, e.target.value);\n          },\n          onBlur: onBlur,\n          overrides: {\n            InputContainer: {\n              style: function style() {\n                return {\n                  backgroundColor: 'transparent'\n                };\n              }\n            }\n          }\n        });\n      }\n\n    case 'integer':\n      {\n        return __jsx(Input, {\n          name: name,\n          value: value,\n          onChange: handleChange,\n          onBlur: onBlur,\n          type: \"number\",\n          overrides: {\n            InputContainer: {\n              style: function style() {\n                return {\n                  backgroundColor: 'transparent'\n                };\n              }\n            }\n          }\n        });\n      }\n\n    case 'checkbox':\n      {\n        var checkboxLabel = field.checkboxLabel;\n        return __jsx(Checkbox, {\n          checked: value,\n          onChange: function onChange(e) {\n            return setFieldValue(name, e.target.checked);\n          },\n          onBlur: onBlur\n        }, checkboxLabel);\n      }\n\n    case 'radio':\n      {\n        var options = field.options;\n        return __jsx(RadioGroup, {\n          value: value,\n          onChange: function onChange(e) {\n            return setFieldValue(name, e.target.value);\n          },\n          onBlur: onBlur\n        }, options.map(function (option) {\n          return __jsx(Radio, {\n            key: option.value,\n            value: option.value\n          }, option.label);\n        }));\n      }\n\n    case 'date':\n      {\n        return __jsx(Datepicker, {\n          value: value,\n          onChange: function onChange(_ref3) {\n            var date = _ref3.date;\n            return setFieldValue(name, date);\n          }\n        });\n      }\n\n    case 'select':\n      {\n        var _options = field.options;\n        return __jsx(Select, {\n          options: _options,\n          value: value,\n          onChange: function onChange(params) {\n            return setFieldValue(name, params.value);\n          },\n          onBlur: onBlur,\n          overrides: {\n            ControlContainer: {\n              style: function style() {\n                return {\n                  backgroundColor: 'transparent'\n                };\n              }\n            }\n          }\n        });\n      }\n\n    default:\n      return null;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}