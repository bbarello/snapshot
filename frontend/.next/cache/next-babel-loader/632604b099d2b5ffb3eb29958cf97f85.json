{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { BaseProvider, LightTheme, DarkTheme } from 'baseui';\nimport { styletron } from 'styletron';\nimport Layout from 'components/Layout/Layout';\nimport { ThemeSwitcherProvider, THEME } from 'contexts/theme/theme.provider';\nimport { CartProvider } from 'contexts/cart/cart.provider';\nimport { ApolloProvider } from '@apollo/client';\nimport { useApollo } from 'apollo/github.client'; // external css\n\nimport '@glidejs/glide/dist/css/glide.core.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'assets/css/reset.css';\nimport 'react-flexbox-grid/dist/react-flexbox-grid.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport 'typeface-open-sans';\nexport default function CustomApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _React$useState = React.useState(THEME.light),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      theme = _React$useState2[0],\n      setTheme = _React$useState2[1];\n\n  React.useEffect(function () {\n    var SAVED_THEME = localStorage.getItem('theme');\n\n    if (SAVED_THEME === null) {\n      SAVED_THEME = THEME.light;\n    }\n\n    setTheme(SAVED_THEME);\n  }, []);\n  var apolloGithubClient = useApollo(pageProps.initialApolloState);\n  return __jsx(ApolloProvider, {\n    client: apolloGithubClient\n  }, __jsx(ThemeSwitcherProvider, {\n    value: {\n      theme: theme,\n      setTheme: setTheme\n    }\n  }, __jsx(StyletronProvider, {\n    value: styletron,\n    debugAfterHydration: true\n  }, __jsx(BaseProvider, {\n    theme: theme === THEME.light ? _objectSpread(_objectSpread({}, LightTheme), {}, {\n      direction: 'ltr'\n    }) : _objectSpread(_objectSpread({}, DarkTheme), {}, {\n      direction: 'ltr'\n    })\n  }, __jsx(CartProvider, null, __jsx(Layout, null, __jsx(Component, pageProps)))))));\n}","map":null,"metadata":{},"sourceType":"module"}