{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tquery getProductBySlug($slug: String!) {\\n\\t\\tproduct(slug: $slug) {\\n\\t\\t\\tid\\n\\t\\t\\tname\\n\\t\\t\\tslug\\n\\t\\t\\tprice\\n\\t\\t\\tthumbnail\\n\\t\\t\\tgallery {\\n\\t\\t\\t\\turl\\n\\t\\t\\t}\\n\\t\\t\\tcolors {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tlabel\\n\\t\\t\\t}\\n\\t\\t\\tfeatures\\n\\t\\t\\tdescription\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { FiCheck } from 'react-icons/fi';\nimport { toast } from 'react-toastify';\nimport Head from 'next/head';\nimport { useQuery, gql } from '@apollo/client';\nimport { useRouter } from 'next/router';\nimport { Button } from 'baseui/button';\nimport { Select } from 'baseui/select';\nimport { Input } from 'baseui/input';\nimport PageTitle from 'components/UiElements/PageTitle/PageTitle';\nimport Container from 'components/UiElements/Container/Container';\nimport Carousel, { Slide } from 'components/UiElements/Carousel/Carousel';\nimport useDirection from '../../utils/useDirection';\nimport { withApollo } from '../../apollo/client';\nimport Wrapper, { MediaWrapper, Image, ContentWrapper, List, ListItem, ProductTitle, ProductPrice, ProductDescription } from '../../components/PageStyles/Product.styled';\nimport { useCartDispatch } from '../../contexts/cart/cart.provider';\nvar GET_PRODUCT = gql(_templateObject());\ntoast.configure();\n\nvar ProductSingle = function ProductSingle() {\n  var _useRouter = useRouter(),\n      slug = _useRouter.query.slug;\n\n  var _useQuery = useQuery(GET_PRODUCT, {\n    variables: {\n      slug: slug\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var dispatch = useCartDispatch();\n\n  var _useState = useState([{\n    label: 'Black',\n    id: 'black',\n    code: '#000'\n  }]),\n      color = _useState[0],\n      setColor = _useState[1];\n\n  var _useState2 = useState('1'),\n      quantity = _useState2[0],\n      setQuantity = _useState2[1];\n\n  var _useDirection = useDirection(),\n      _useDirection2 = _slicedToArray(_useDirection, 1),\n      direction = _useDirection2[0];\n\n  console.log(color, quantity, 'color');\n  if (!data) return null;\n  var _data$product = data.product,\n      id = _data$product.id,\n      name = _data$product.name,\n      description = _data$product.description,\n      price = _data$product.price,\n      thumbnail = _data$product.thumbnail,\n      colors = _data$product.colors,\n      gallery = _data$product.gallery,\n      features = _data$product.features;\n\n  function handleAddToCart() {\n    var item = {\n      id: id,\n      name: name,\n      thumbnail: thumbnail,\n      color: color.length !== 0 ? color[0].id : undefined,\n      quantity: quantity,\n      price: price\n    };\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: item\n    });\n    toast('Added to the bag', {\n      progressClassName: 'fancy-progress-bar',\n      position: 'top-right',\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true\n    });\n  }\n\n  console.log(data, 'data');\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, name, \" \"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: description\n  })), __jsx(PageTitle, {\n    title: name,\n    subtitle: \"Awesome GitHub T-shirts and other cool swag\"\n  }), __jsx(Container, null, __jsx(Wrapper, null, __jsx(MediaWrapper, null, gallery && gallery.length !== 0 ? __jsx(Carousel, {\n    options: {\n      direction: direction\n    },\n    controls: false,\n    carouselSelector: \"productGallery\",\n    thumbs: gallery\n  }, gallery.map(function (item, index) {\n    return __jsx(Slide, {\n      key: \"gallery-key\".concat(index)\n    }, __jsx(\"img\", {\n      src: item.url,\n      alt: \"Gallery\"\n    }));\n  })) : __jsx(Image, {\n    src: thumbnail,\n    alt: name\n  })), __jsx(ContentWrapper, null, __jsx(ProductTitle, null, name), __jsx(ProductPrice, null, \"$ \", price), __jsx(Input, {\n    value: quantity,\n    onChange: function onChange(e) {\n      return setQuantity(e.target.value);\n    },\n    type: \"number\",\n    overrides: {\n      Root: {\n        style: function style() {\n          return {\n            width: '100%',\n            marginBottom: '30px',\n            '@media only screen and (min-width: 376px)': {\n              maxWidth: '240px'\n            }\n          };\n        }\n      },\n      InputContainer: {\n        style: function style() {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }), colors && __jsx(Select, {\n    options: colors,\n    placeholder: \"Select color\",\n    value: color,\n    onChange: function onChange(params) {\n      return setColor(params.value);\n    },\n    overrides: {\n      Root: {\n        style: function style() {\n          return {\n            width: '100%',\n            '@media only screen and (min-width: 376px)': {\n              maxWidth: '240px'\n            }\n          };\n        }\n      },\n      ControlContainer: {\n        style: function style() {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }), features && __jsx(List, null, features.map(function (item, index) {\n    return __jsx(ListItem, {\n      key: \"\".concat(slug, \"_key \").concat(index)\n    }, __jsx(FiCheck, null), \"\\xA0 \", item);\n  })), description && __jsx(ProductDescription, null, description), __jsx(Button, {\n    onClick: handleAddToCart,\n    overrides: {\n      BaseButton: {\n        style: function style(_ref) {\n          var $theme = _ref.$theme;\n          return _objectSpread(_objectSpread({}, $theme.typography.font450), {}, {\n            width: '100%',\n            '@media only screen and (min-width: 376px)': _objectSpread({\n              maxWidth: '240px'\n            }, $theme.typography.font250)\n          });\n        }\n      }\n    }\n  }, \"Add to cart\")))));\n};\n\nexport default withApollo(ProductSingle);","map":null,"metadata":{},"sourceType":"module"}