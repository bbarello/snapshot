{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState, Fragment } from 'react';\nimport { AiFillCloseSquare, AiOutlineEdit } from 'react-icons/ai';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Input } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport { Checkbox } from 'baseui/checkbox';\nimport { Grab } from 'baseui/icon';\nimport { Block } from 'baseui/block';\nimport { TodoContext } from './TodoContext';\nimport { TodoItemWrapper, TodoItem, EditButton, RemoveButton } from './Todo.styled';\n/**\n * Update Todo Component\n */\n\nfunction UpdateTodo(_ref) {\n  var todoItem = _ref.todoItem,\n      updateTodo = _ref.updateTodo,\n      setShowInput = _ref.setShowInput;\n\n  var _React$useState = React.useState(todoItem.content),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var updateTodoItem = function updateTodoItem() {\n    var updatedTodo = _objectSpread(_objectSpread({}, todoItem), {}, {\n      content: value\n    });\n\n    updateTodo(updatedTodo);\n    setShowInput(false);\n  };\n\n  return __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }\n    }\n  }, __jsx(Input, {\n    autoFocus: true,\n    value: value,\n    onChange: function onChange(event) {\n      return setValue(event.currentTarget.value);\n    },\n    placeholder: \"Enter Your Todo\",\n    overrides: {\n      Root: {\n        style: {\n          minHeight: '54px'\n        }\n      }\n    }\n  }), __jsx(Button, {\n    overrides: {\n      BaseButton: {\n        style: function style(_ref2) {\n          var $theme = _ref2.$theme;\n          return _objectSpread(_objectSpread({}, $theme.typography.font250), {}, {\n            minWidth: '80px',\n            minHeight: '54px',\n            '@media only screen and (min-width: 481px)': {\n              minWidth: '130px'\n            }\n          });\n        }\n      }\n    },\n    onClick: function onClick() {\n      return updateTodoItem();\n    }\n  }, \"Update\"));\n}\n\nfunction Todo(_ref3) {\n  var todo = _ref3.todo,\n      index = _ref3.index;\n\n  var _useContext = useContext(TodoContext),\n      updateTodo = _useContext.updateTodo,\n      removeTodo = _useContext.removeTodo;\n\n  var _useState = useState(false),\n      showInput = _useState[0],\n      setShowInput = _useState[1];\n\n  var checked = todo.status === 'done' ? true : false;\n\n  var updateTodoStatus = function updateTodoStatus(status) {\n    var todoStatus = _objectSpread(_objectSpread({}, todo), {}, {\n      status: status === true ? 'done' : 'pending'\n    });\n\n    updateTodo(todoStatus);\n  };\n\n  return __jsx(Fragment, null, !showInput ? __jsx(Draggable, {\n    draggableId: todo.id,\n    index: index\n  }, function (provided) {\n    return __jsx(TodoItem, _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps), __jsx(TodoItemWrapper, null, __jsx(Block, {\n      overrides: {\n        Block: {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          }\n        }\n      }\n    }, __jsx(Grab, {\n      size: 24,\n      color: \"#545454\"\n    }), __jsx(Checkbox, {\n      checked: checked,\n      onChange: function onChange() {\n        return updateTodoStatus(!checked);\n      },\n      overrides: {\n        Root: {\n          style: {\n            paddingLeft: '10px',\n            paddingRight: '10px',\n            '@media only screen and (max-width: 480px)': {\n              alignItems: 'center'\n            }\n          }\n        }\n      }\n    }, todo.content)), __jsx(Block, {\n      overrides: {\n        Block: {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          }\n        }\n      }\n    }, __jsx(EditButton, {\n      onClick: function onClick(e) {\n        e.preventDefault();\n        setShowInput(!showInput);\n      }\n    }, __jsx(AiOutlineEdit, {\n      size: '24px'\n    })), __jsx(RemoveButton, {\n      onClick: function onClick(e) {\n        e.preventDefault();\n        removeTodo(todo.id);\n      }\n    }, __jsx(AiFillCloseSquare, {\n      size: '24px'\n    })))));\n  }) : __jsx(UpdateTodo, {\n    todoItem: todo,\n    updateTodo: updateTodo,\n    setShowInput: setShowInput\n  }));\n}\n\nexport default Todo;","map":null,"metadata":{},"sourceType":"module"}