{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { addItemToCart, removeItemFromCart } from './cart.utils';\nexport const initialState = {\n  hidden: true,\n  cartItems: [],\n  address: null\n}; // type State = typeof initialState;\n\nexport default function cartReducer(state, action) {\n  console.log(state, 'context state');\n\n  switch (action.type) {\n    case 'TOGGLE_CART_HIDDEN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        hidden: !state.hidden\n      });\n\n    case 'ADD_ITEM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      });\n\n    case 'REMOVE_ITEM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      });\n\n    case 'CLEAR_ITEM_FROM_CART':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\n      });\n\n    case 'CLEAR_CART':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cartItems: []\n      });\n\n    default:\n      return state;\n    // default: {\n    //   throw new Error(`Unhandled action type: ${action.type}`);\n    // }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}