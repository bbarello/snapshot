{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query SearchRepositories($queryString: String!) {\\n    search(query: $queryString, type: REPOSITORY, first: 10) {\\n      repositoryCount\\n      edges {\\n        node {\\n          ... on Repository {\\n            id\\n            name\\n            nameWithOwner\\n            description\\n            repositoryTopics(first: 5) {\\n              nodes {\\n                id\\n                topic {\\n                  id\\n                  name\\n                }\\n              }\\n            }\\n            stargazers {\\n              totalCount\\n            }\\n            forks {\\n              totalCount\\n            }\\n            updatedAt\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { GoStar } from 'react-icons/go';\nimport { Grid, Cell } from 'baseui/layout-grid';\nimport { Block } from 'baseui/block';\nimport { Button } from 'baseui/button';\nimport { Search } from 'baseui/icon';\nimport { Input } from 'baseui/input';\nimport { Tag } from 'baseui/tag';\nimport Container from 'components/UiElements/Container/Container';\nimport ListGridCard from 'components/UiElements/ListGridCard/ListGridCard';\nimport Loader from 'components/UiElements/Loader/Loader';\nimport AppsMenu from 'components/SideMenu/AppsMenu';\nimport { useQuery, gql } from '@apollo/client';\nvar GetRepositoriesBySearch = gql(_templateObject());\nvar TITLE = 'Github Search';\nvar INITIAL_SEARCH_TEXT = 'react';\n\nvar Github = function Github() {\n  var _data$search, _data$search2;\n\n  var _React$useState = React.useState(INITIAL_SEARCH_TEXT),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchText = _React$useState2[0],\n      setSearchText = _React$useState2[1];\n\n  var _useQuery = useQuery(GetRepositoriesBySearch, {\n    variables: {\n      queryString: INITIAL_SEARCH_TEXT\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch;\n\n  if (error) return __jsx(\"div\", null, \"Error! $\", error.message);\n\n  function onSearch(e) {\n    e.preventDefault();\n    refetch({\n      queryString: searchText\n    });\n  }\n\n  function After() {\n    return __jsx(Block, {\n      overrides: {\n        Block: {\n          style: function style(_ref) {\n            var $theme = _ref.$theme;\n            return {\n              display: 'flex',\n              alignItems: 'center',\n              paddingLeft: $theme.sizing.scale500,\n              paddingRight: $theme.sizing.scale500\n            };\n          }\n        }\n      }\n    }, __jsx(Search, {\n      size: \"24px\"\n    }));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, TITLE, \" \"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: \"Inst Github app\"\n  })), __jsx(Container, null, __jsx(Block, {\n    paddingTop: ['0', '0', '0', '40px']\n  }, __jsx(Grid, {\n    gridColumns: 12,\n    gridGutters: 0,\n    gridMargins: 0\n  }, __jsx(Cell, {\n    span: [12, 12, 3]\n  }, __jsx(AppsMenu, null)), __jsx(Cell, {\n    span: [12, 12, 9]\n  }, !loading ? __jsx(React.Fragment, null, __jsx(Block, {\n    paddingTop: ['10px', '15px', '30px', '0'],\n    paddingBottom: \"25px\"\n  }, __jsx(Block, {\n    as: \"h3\",\n    overrides: {\n      Block: {\n        style: function style(_ref2) {\n          var $theme = _ref2.$theme;\n          return _objectSpread(_objectSpread({}, $theme.typography.font450), {}, {\n            color: $theme.colors.primary,\n            marginBottom: '10px'\n          });\n        }\n      }\n    }\n  }, TITLE), __jsx(Block, {\n    as: \"p\",\n    overrides: {\n      Block: {\n        style: function style(_ref3) {\n          var $theme = _ref3.$theme;\n          return _objectSpread(_objectSpread({}, $theme.typography.font200), {}, {\n            color: $theme.colors.contentSecondary\n          });\n        }\n      }\n    }\n  }, __jsx(Block, {\n    as: \"span\",\n    overrides: {\n      Block: {\n        style: function style(_ref4) {\n          var $theme = _ref4.$theme;\n          return {\n            color: $theme.colors.primary,\n            marginRight: '5px'\n          };\n        }\n      }\n    }\n  }, data === null || data === void 0 ? void 0 : (_data$search = data.search) === null || _data$search === void 0 ? void 0 : _data$search.repositoryCount))), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: function style(_ref5) {\n          var $theme = _ref5.$theme;\n          return {\n            paddingBottom: '40px',\n            borderBottom: \"1px solid \".concat($theme.colors.backgroundTertiary),\n            '@media only screen and (max-width: 991px)': {\n              paddingBottom: '30px'\n            }\n          };\n        }\n      }\n    }\n  }, __jsx(\"form\", {\n    onSubmit: onSearch\n  }, __jsx(Input, {\n    overrides: {\n      After: After\n    },\n    placeholder: \"Search\",\n    value: searchText,\n    onChange: function onChange(e) {\n      return setSearchText(e.target.value);\n    }\n  }))), data === null || data === void 0 ? void 0 : (_data$search2 = data.search) === null || _data$search2 === void 0 ? void 0 : _data$search2.edges.map(function (_ref6) {\n    var node = _ref6.node;\n    return __jsx(Block, {\n      key: \"github-repo--key\".concat(node.id),\n      overrides: {\n        Block: {\n          style: function style(_ref7) {\n            var $theme = _ref7.$theme;\n            return {\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              paddingTop: '23px',\n              paddingBottom: '20px',\n              borderBottom: \"1px solid \".concat($theme.colors.backgroundTertiary)\n            };\n          }\n        }\n      }\n    }, __jsx(ListGridCard, {\n      title: node.nameWithOwner,\n      description: node.description,\n      btn: node.repositoryTopics.nodes.map(function (item) {\n        return __jsx(Tag, {\n          key: item.id,\n          overrides: {\n            Root: {\n              style: {\n                marginTop: '15px'\n              }\n            }\n          },\n          closeable: false,\n          variant: \"solid\"\n        }, item.topic.name);\n      }),\n      style: {\n        alignItems: 'flex-start'\n      }\n    }), __jsx(Button, {\n      kind: \"secondary\",\n      overrides: {\n        BaseButton: {\n          style: function style(_ref8) {\n            var $theme = _ref8.$theme;\n            return _objectSpread({\n              minWidth: '80px',\n              justifyContent: 'space-around',\n              flexShrink: 0\n            }, $theme.typography.font250);\n          }\n        }\n      }\n    }, __jsx(GoStar, {\n      style: {\n        flexShrink: 0\n      }\n    }), __jsx(Block, {\n      paddingLeft: \"5px\",\n      paddingRight: \"5px\"\n    }, node.stargazers.totalCount)));\n  })) : __jsx(Loader, null))))));\n};\n\nexport default Github;","map":null,"metadata":{},"sourceType":"module"}