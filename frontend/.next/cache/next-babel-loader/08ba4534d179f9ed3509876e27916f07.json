{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { GoStar } from 'react-icons/go';\nimport { Grid, Cell } from 'baseui/layout-grid';\nimport { Block } from 'baseui/block';\nimport { Button } from 'baseui/button';\nimport { Search } from 'baseui/icon';\nimport { Input } from 'baseui/input';\nimport { Tag } from 'baseui/tag';\nimport Container from 'components/UiElements/Container/Container';\nimport ListGridCard from 'components/UiElements/ListGridCard/ListGridCard';\nimport Loader from 'components/UiElements/Loader/Loader';\nimport AppsMenu from 'components/SideMenu/AppsMenu';\nimport { useQuery, gql } from '@apollo/client';\nconst GetRepositoriesBySearch = gql`\n  query SearchRepositories($queryString: String!) {\n    search(query: $queryString, type: REPOSITORY, first: 10) {\n      repositoryCount\n      edges {\n        node {\n          ... on Repository {\n            id\n            name\n            nameWithOwner\n            description\n            repositoryTopics(first: 5) {\n              nodes {\n                id\n                topic {\n                  id\n                  name\n                }\n              }\n            }\n            stargazers {\n              totalCount\n            }\n            forks {\n              totalCount\n            }\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n`;\nconst TITLE = 'Github Search';\nconst INITIAL_SEARCH_TEXT = 'react';\n\nconst Github = () => {\n  var _data$search, _data$search2;\n\n  const [searchText, setSearchText] = React.useState(INITIAL_SEARCH_TEXT);\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(GetRepositoriesBySearch, {\n    variables: {\n      queryString: INITIAL_SEARCH_TEXT\n    }\n  });\n  if (error) return __jsx(\"div\", null, \"Error! $\", error.message);\n\n  function onSearch(e) {\n    e.preventDefault();\n    refetch({\n      queryString: searchText\n    });\n  }\n\n  function After() {\n    return __jsx(Block, {\n      overrides: {\n        Block: {\n          style: ({\n            $theme\n          }) => {\n            return {\n              display: 'flex',\n              alignItems: 'center',\n              paddingLeft: $theme.sizing.scale500,\n              paddingRight: $theme.sizing.scale500\n            };\n          }\n        }\n      }\n    }, __jsx(Search, {\n      size: \"24px\"\n    }));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, TITLE, \" \"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: \"Inst Github app\"\n  })), __jsx(Container, null, __jsx(Block, {\n    paddingTop: ['0', '0', '0', '40px']\n  }, __jsx(Grid, {\n    gridColumns: 12,\n    gridGutters: 0,\n    gridMargins: 0\n  }, __jsx(Cell, {\n    span: [12, 12, 3]\n  }, __jsx(AppsMenu, null)), __jsx(Cell, {\n    span: [12, 12, 9]\n  }, !loading ? __jsx(React.Fragment, null, __jsx(Block, {\n    paddingTop: ['10px', '15px', '30px', '0'],\n    paddingBottom: \"25px\"\n  }, __jsx(Block, {\n    as: \"h3\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font450), {}, {\n            color: $theme.colors.primary,\n            marginBottom: '10px'\n          });\n        }\n      }\n    }\n  }, TITLE), __jsx(Block, {\n    as: \"p\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font200), {}, {\n            color: $theme.colors.contentSecondary\n          });\n        }\n      }\n    }\n  }, __jsx(Block, {\n    as: \"span\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return {\n            color: $theme.colors.primary,\n            marginRight: '5px'\n          };\n        }\n      }\n    }\n  }, data === null || data === void 0 ? void 0 : (_data$search = data.search) === null || _data$search === void 0 ? void 0 : _data$search.repositoryCount))), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return {\n            paddingBottom: '40px',\n            borderBottom: `1px solid ${$theme.colors.backgroundTertiary}`,\n            '@media only screen and (max-width: 991px)': {\n              paddingBottom: '30px'\n            }\n          };\n        }\n      }\n    }\n  }, __jsx(\"form\", {\n    onSubmit: onSearch\n  }, __jsx(Input, {\n    overrides: {\n      After\n    },\n    placeholder: \"Search\",\n    value: searchText,\n    onChange: e => setSearchText(e.target.value)\n  }))), data === null || data === void 0 ? void 0 : (_data$search2 = data.search) === null || _data$search2 === void 0 ? void 0 : _data$search2.edges.map(({\n    node\n  }) => __jsx(Block, {\n    key: `github-repo--key${node.id}`,\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            paddingTop: '23px',\n            paddingBottom: '20px',\n            borderBottom: `1px solid ${$theme.colors.backgroundTertiary}`\n          };\n        }\n      }\n    }\n  }, __jsx(ListGridCard, {\n    title: node.nameWithOwner,\n    description: node.description,\n    btn: node.repositoryTopics.nodes.map(item => __jsx(Tag, {\n      key: item.id,\n      overrides: {\n        Root: {\n          style: {\n            marginTop: '15px'\n          }\n        }\n      },\n      closeable: false,\n      variant: \"solid\"\n    }, item.topic.name)),\n    style: {\n      alignItems: 'flex-start'\n    }\n  }), __jsx(Button, {\n    kind: \"secondary\",\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({\n            minWidth: '80px',\n            justifyContent: 'space-around',\n            flexShrink: 0\n          }, $theme.typography.font250);\n        }\n      }\n    }\n  }, __jsx(GoStar, {\n    style: {\n      flexShrink: 0\n    }\n  }), __jsx(Block, {\n    paddingLeft: \"5px\",\n    paddingRight: \"5px\"\n  }, node.stargazers.totalCount))))) : __jsx(Loader, null))))));\n};\n\nexport default Github;","map":null,"metadata":{},"sourceType":"module"}