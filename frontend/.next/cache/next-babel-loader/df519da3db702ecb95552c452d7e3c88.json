{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { Button } from 'baseui/button';\nimport { Block } from 'baseui/block';\nimport FormikFormControl from './FormikFormControl';\nimport Field from './Field';\nimport { dataSchema, uiSchema } from './schemas';\n\nfunction Form(_ref) {\n  var initialValues = _ref.initialValues,\n      dataSchema = _ref.dataSchema,\n      uiSchema = _ref.uiSchema,\n      onSubmit = _ref.onSubmit;\n  var fieldsData = dataSchema.fields;\n  var sections = uiSchema.sections;\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validate: function validate(values) {\n      return validateDataSchema({\n        values: values,\n        dataSchema: dataSchema\n      });\n    },\n    validateOnBlur: false,\n    validateOnChange: false\n  }, function (_ref2) {\n    var handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values,\n        touched = _ref2.touched;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, sections.map(function (section) {\n      var title = section.title,\n          fields = section.fields;\n      return __jsx(Block, {\n        key: title\n      }, fields.map(function (fieldName) {\n        var field = fieldsData[fieldName];\n\n        if (!field) {\n          throw new Error('Wrong field name in ui schema');\n        }\n\n        if (!areFieldConditionsFulfilled({\n          values: values,\n          field: field\n        })) {\n          return null;\n        }\n\n        return __jsx(FormikFormControl, {\n          key: fieldName,\n          name: fieldName,\n          label: field.label,\n          caption: field.caption\n        }, __jsx(Field, {\n          field: field,\n          name: fieldName\n        }));\n      }));\n    }), __jsx(Button, {\n      type: \"submit\"\n    }, \"Submit\"));\n  });\n}\n\nfunction validateDataSchema(_ref3) {\n  var values = _ref3.values,\n      dataSchema = _ref3.dataSchema;\n  var fields = dataSchema.fields;\n  var errors = {};\n  Object.keys(fields).forEach(function (fieldName) {\n    var field = fields[fieldName];\n\n    if (!field.required) {\n      return;\n    }\n\n    if (areFieldConditionsFulfilled({\n      values: values,\n      field: field\n    })) {\n      var value = getFieldValue({\n        name: fieldName,\n        field: field,\n        values: values\n      }); // this check should depend on the field type\n\n      if (value === undefined || values === '' || value === null) {\n        errors[fieldName] = \"Field \\\"\".concat(fieldName, \"\\\" is required\");\n      }\n    }\n  });\n  console.log('errors', errors);\n  return errors;\n}\n\nvar areFieldConditionsFulfilled = function areFieldConditionsFulfilled(_ref4) {\n  var values = _ref4.values,\n      field = _ref4.field;\n  var condition = field.condition;\n\n  if (!condition || condition.rules.length === 0) {\n    return true;\n  }\n\n  var rules = condition.rules,\n      operator = condition.operator;\n  var areRulesRespected = true;\n  var i = 0;\n\n  while (areRulesRespected && i < rules.length) {\n    var _rules$i = rules[i],\n        fieldName = _rules$i.field,\n        value = _rules$i.value;\n    var fieldValue = getFieldValue({\n      name: fieldName,\n      field: field,\n      values: values\n    });\n    var isRuleRespected = fieldValue === value;\n    areRulesRespected = operator === 'AND' ? areRulesRespected && isRuleRespected : areRulesRespected || isRuleRespected;\n    i++;\n  }\n\n  return areRulesRespected;\n};\n\nvar getFieldValue = function getFieldValue(_ref5) {\n  var name = _ref5.name,\n      field = _ref5.field,\n      values = _ref5.values;\n\n  if (values[name] === undefined) {\n    return undefined;\n  }\n\n  switch (field.type) {\n    case 'text':\n    case 'textarea':\n    case 'integer':\n    case 'checkbox':\n    case 'radio':\n    case 'date':\n      return values[name];\n\n    case 'select':\n      return values[name].values;\n  }\n};\n\nexport default function ExampleFormFormik() {\n  return __jsx(Form, {\n    initialValues: {\n      name: '',\n      email: '',\n      dateOfBirth: '',\n      favoriteColor: [],\n      aboutYourself: '',\n      radioGroup: '',\n      profileStatus: ''\n    },\n    dataSchema: dataSchema,\n    uiSchema: uiSchema,\n    onSubmit: function onSubmit(values) {\n      return alert(JSON.stringify(values, null, 4));\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}