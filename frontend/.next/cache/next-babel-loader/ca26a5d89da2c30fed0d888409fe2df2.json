{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { Block } from 'baseui/block';\nimport { Button } from 'baseui/button';\nimport Container from 'components/UiElements/Container/Container';\nimport { StyledTable, StyledBodyCell } from 'baseui/table-grid';\nimport { StyledTableHeadAlt } from 'components/PageStyles/Apps.styled';\nimport { withApollo } from 'apollo/client';\nimport Loader from 'components/UiElements/Loader/Loader';\nconst GET_INVOICE = gql`\n\tquery GetInvoice($id: ID!) {\n\t\tinvoice(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tcustomer {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\taddress\n\t\t\t}\n\t\t\tvendor {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\taddress\n\t\t\t}\n\t\t\titems {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tunit\n\t\t\t\tunitPrice\n\t\t\t}\n\t\t\ttotal\n\t\t\tstatus\n\t\t\tcreatedAt\n\t\t}\n\t}\n`;\nexport default withApollo(function InvoiceDetail() {\n  const {\n    push,\n    query: {\n      id\n    }\n  } = useRouter();\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_INVOICE, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return __jsx(Container, null, __jsx(Loader, null));\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"View Invoice \", id, \" | \"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: \"Inst view a invoice\"\n  })), __jsx(Container, null, __jsx(Block, {\n    paddingTop: ['15px', '20px', '30px', '40px'],\n    paddingBottom: \"30px\",\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          justifyContent: 'flex-end',\n          '@media only screen and (max-width: 375px)': {\n            flexWrap: 'wrap',\n            flexDirection: 'column',\n            justifyContent: 'flex-start'\n          }\n        }\n      }\n    }\n  }, __jsx(Button, {\n    onClick: () => push('/apps/invoice/'),\n    kind: 'secondary',\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font250);\n        }\n      }\n    }\n  }), __jsx(Button, {\n    onClick: () => alert('click'),\n    kind: 'secondary',\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font250), {}, {\n            marginLeft: '15px',\n            marginRight: '15px',\n            '@media only screen and (max-width: 375px)': {\n              marginLeft: '0',\n              marginRight: '0',\n              marginTop: '15px',\n              marginBottom: '15px'\n            }\n          });\n        }\n      }\n    }\n  }, \"Download Invoice\"), __jsx(Button, {\n    onClick: () => push('/apps/invoice/add'),\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font250);\n        }\n      }\n    }\n  })), __jsx(Block, {\n    paddingTop: \"33px\",\n    paddingBottom: \"30px\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return {\n            display: 'flex',\n            justifyContent: 'space-between',\n            borderTopWidth: '2px',\n            borderTopStyle: 'dashed',\n            borderTopColor: $theme.colors.backgroundTertiary\n          };\n        }\n      }\n    }\n  }, __jsx(Block, null, __jsx(Block, {\n    as: \"h4\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.LabelLarge), {}, {\n            color: $theme.colors.primaryA\n          });\n        }\n      }\n    }\n  }, \"Bill From\"), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return {\n            color: $theme.colors.contentSecondary,\n            lineHeight: 2,\n            paddingTop: '10px'\n          };\n        }\n      }\n    }\n  }, data.invoice.vendor.name, __jsx(\"br\", null), data.invoice.vendor.address)), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          textAlign: 'right'\n        }\n      }\n    }\n  }, __jsx(Block, {\n    as: \"h4\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.LabelLarge), {}, {\n            color: $theme.colors.primaryA\n          });\n        }\n      }\n    }\n  }, \"Bill To\"), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return {\n            color: $theme.colors.contentSecondary,\n            lineHeight: 2,\n            paddingTop: '10px'\n          };\n        }\n      }\n    }\n  }, data.invoice.customer.name, __jsx(\"br\", null), data.invoice.customer.address))), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          minHeight: '150px'\n        }\n      }\n    }\n  }, __jsx(StyledTable, {\n    $gridTemplateColumns: \"auto auto auto auto auto\"\n  }, __jsx(StyledTableHeadAlt, null, \"Number\"), __jsx(StyledTableHeadAlt, null, \"Item Name\"), __jsx(StyledTableHeadAlt, null, \"Unit Costs\"), __jsx(StyledTableHeadAlt, null, \"Unit\"), __jsx(StyledTableHeadAlt, null, \"Price\"), data.invoice.items.map((item, index) => {\n    const striped = index % 2 === 0;\n    return __jsx(React.Fragment, {\n      key: `invoice-item--key${item.id}`\n    }, __jsx(StyledBodyCell, {\n      $striped: striped\n    }, item.id), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, item.name), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, \"$ \", item.unitPrice), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, item.unit), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, \"$ \", item.unit * item.unitPrice));\n  }))), __jsx(Block, {\n    as: \"h3\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.LabelLarge), {}, {\n            color: $theme.colors.primaryA,\n            textAlign: 'right',\n            paddingTop: '30px'\n          });\n        }\n      }\n    }\n  }, \"Grand Total: \\xA0\\xA0 $ \", data.invoice.total)));\n});","map":null,"metadata":{},"sourceType":"module"}