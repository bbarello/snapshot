{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Scrollspy from 'react-scrollspy';\nimport { ListItem, AnchorText } from './ScrollSpyMenu.styled';\nimport { Block } from 'baseui/block';\n\nconst ScrollSpyMenu = (_ref) => {\n  let {\n    items,\n    showCounter,\n    isSeparator,\n    menuItemOffset\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"items\", \"showCounter\", \"isSeparator\", \"menuItemOffset\"]);\n\n  const scrollItems = [];\n  items.forEach(item => {\n    const path = item.split(' ').join('_');\n    scrollItems.push(path);\n  });\n  return __jsx(Scrollspy, _extends({\n    className: \"scrollspy-menu\",\n    items: scrollItems,\n    currentClassName: \"is-current\"\n  }, props), items.map((item, index) => {\n    const path = item.split(' ').join('_');\n\n    function pad(index) {\n      let valString = index + '';\n\n      if (valString.length < 2) {\n        return '0' + valString;\n      } else {\n        return valString;\n      }\n    }\n\n    return __jsx(ListItem, {\n      key: `scroll-item--key${index}`\n    }, __jsx(AnchorText, {\n      href: `#${path}`,\n      offset: menuItemOffset\n    }, showCounter && pad(index), isSeparator && __jsx(Block, {\n      as: \"span\",\n      paddingLeft: \"5px\",\n      paddingRight: \"5px\"\n    }), item));\n  }));\n};\n\nexport default ScrollSpyMenu;","map":null,"metadata":{},"sourceType":"module"}