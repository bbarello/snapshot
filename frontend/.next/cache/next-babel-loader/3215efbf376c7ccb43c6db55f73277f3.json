{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment } from 'react';\nimport Head from 'next/head';\nimport { format } from 'date-fns';\nimport { useRouter } from 'next/router';\nimport { Grid, Cell } from 'baseui/layout-grid';\nimport { AiFillCloseSquare } from 'react-icons/ai';\nimport { IoIosEye } from 'react-icons/io';\nimport { Block } from 'baseui/block';\nimport { StyledTable, StyledBodyCell } from 'baseui/table-grid';\nimport { Tag } from 'baseui/tag';\nimport { Button } from 'baseui/button';\nimport Container from 'components/UiElements/Container/Container';\nimport IconButton from 'components/UiElements/IconButton/IconButton';\nimport AppsMenu from 'components/SideMenu/AppsMenu';\nimport Loader from 'components/UiElements/Loader/Loader';\nimport { StyledTableHeadAlt } from 'components/PageStyles/Apps.styled';\nimport { withApollo } from 'apollo/client';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nconst GET_INVOICES = gql`\n\tquery {\n\t\tinvoices {\n\t\t\tid\n\t\t\tname\n\t\t\tcustomer {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\taddress\n\t\t\t}\n\t\t\tvendor {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\taddress\n\t\t\t}\n\t\t\titems {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tunitPrice\n\t\t\t}\n\t\t\ttotal\n\t\t\tstatus\n\t\t\tcreatedAt\n\t\t}\n\t}\n`;\nconst DELETE_INVOICE = gql`\n\tmutation DeleteInvoice($id: String!) {\n\t\tdeleteInvoice(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tcustomer {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\taddress\n\t\t\t}\n\t\t\tvendor {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\taddress\n\t\t\t}\n\t\t\titems {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tunitPrice\n\t\t\t}\n\t\t\ttotal\n\t\t\tstatus\n\t\t\tcreatedAt\n\t\t}\n\t}\n`;\nconst TITLE = 'Invoice';\nconst SUB_TITLE = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod';\n\nconst Invoice = () => {\n  var _data$invoices;\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_INVOICES);\n  const [deleteInvoice] = useMutation(DELETE_INVOICE, {\n    update(cache, {\n      data: {\n        deleteInvoice\n      }\n    }) {\n      const {\n        invoices\n      } = cache.readQuery({\n        query: GET_INVOICES\n      });\n      cache.writeQuery({\n        query: GET_INVOICES,\n        data: {\n          invoices: invoices.filter(invoice => invoice.id !== deleteInvoice.id)\n        }\n      });\n    }\n\n  });\n  const router = useRouter();\n  if (error) return __jsx(\"div\", null, \"Error! $\", error.message);\n\n  function removeInvoice(id) {\n    deleteInvoice({\n      variables: {\n        id\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, TITLE, \" \"), __jsx(\"meta\", {\n    name: \"Description\",\n    content: SUB_TITLE\n  })), __jsx(Container, null, __jsx(Block, {\n    paddingTop: ['0', '0', '0', '40px']\n  }, __jsx(Grid, {\n    gridColumns: 12,\n    gridGutters: 0,\n    gridMargins: 0\n  }, __jsx(Cell, {\n    span: [12, 12, 3]\n  }, __jsx(AppsMenu, null)), __jsx(Cell, {\n    span: [12, 12, 9]\n  }, !loading ? __jsx(React.Fragment, null, __jsx(Block, {\n    paddingTop: ['10px', '15px', '30px', '0'],\n    overrides: {\n      Block: {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          marginBottom: '40px'\n        }\n      }\n    }\n  }, __jsx(Block, null, __jsx(Block, {\n    as: \"h3\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font450), {}, {\n            color: $theme.colors.primaryA,\n            marginBottom: '10px'\n          });\n        }\n      }\n    }\n  }, TITLE), __jsx(Block, {\n    as: \"p\",\n    overrides: {\n      Block: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread(_objectSpread({}, $theme.typography.font200), {}, {\n            color: $theme.colors.contentSecondary\n          });\n        }\n      }\n    }\n  }, SUB_TITLE)), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          flexShrink: 0\n        }\n      }\n    }\n  }, __jsx(Button, {\n    onClick: () => router.push(`/apps/invoice/add`),\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font250);\n        }\n      }\n    }\n  }, \"Add Invoice\"))), __jsx(Block, {\n    overrides: {\n      Block: {\n        style: {\n          minHeight: '150px'\n        }\n      }\n    }\n  }, __jsx(StyledTable, {\n    $gridTemplateColumns: \"max-content max-content auto auto max-content max-content max-content\"\n  }, __jsx(StyledTableHeadAlt, null, \"Number\"), __jsx(StyledTableHeadAlt, null, \"Date\"), __jsx(StyledTableHeadAlt, null, \"Bill From\"), __jsx(StyledTableHeadAlt, null, \"Bill To\"), __jsx(StyledTableHeadAlt, null, \"Total Cost\"), __jsx(StyledTableHeadAlt, null, \"Status\"), __jsx(StyledTableHeadAlt, null, \"Action\"), data === null || data === void 0 ? void 0 : (_data$invoices = data.invoices) === null || _data$invoices === void 0 ? void 0 : _data$invoices.map((item, index) => {\n    var _item$status, _item$status2, _item$vendor, _item$customer;\n\n    const striped = index % 2 === 0;\n    const status = (item === null || item === void 0 ? void 0 : (_item$status = item.status) === null || _item$status === void 0 ? void 0 : _item$status.charAt(0).toUpperCase()) + (item === null || item === void 0 ? void 0 : (_item$status2 = item.status) === null || _item$status2 === void 0 ? void 0 : _item$status2.slice(1).toLowerCase());\n    let tag;\n\n    switch (item.status) {\n      case 'SHIPPED':\n        tag = __jsx(Tag, {\n          kind: \"accent\",\n          variant: \"solid\",\n          closeable: false\n        }, status);\n        break;\n\n      case 'PENDING':\n        tag = __jsx(Tag, {\n          kind: \"negative\",\n          variant: \"solid\",\n          closeable: false\n        }, status);\n        break;\n\n      case 'DELIVERED':\n        tag = __jsx(Tag, {\n          kind: \"positive\",\n          variant: \"solid\",\n          closeable: false\n        }, status);\n        break;\n    }\n\n    return __jsx(Fragment, {\n      key: index\n    }, __jsx(StyledBodyCell, {\n      $striped: striped\n    }, \"# \", item.id), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, format(new Date(item.createdAt), 'yyyy-MM-dd')), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, (_item$vendor = item.vendor) === null || _item$vendor === void 0 ? void 0 : _item$vendor.address), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, (_item$customer = item.customer) === null || _item$customer === void 0 ? void 0 : _item$customer.address), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, \"$ \", item.total), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, tag), __jsx(StyledBodyCell, {\n      $striped: striped\n    }, __jsx(IconButton, {\n      onClick: () => router.push('/apps/invoice/[id]', `/apps/invoice/${item.id}`)\n    }, __jsx(IoIosEye, null)), __jsx(IconButton, {\n      onClick: () => removeInvoice(item.id)\n    }, __jsx(AiFillCloseSquare, null))));\n  })))) : __jsx(Loader, null))))));\n};\n\nexport default withApollo(Invoice);","map":null,"metadata":{},"sourceType":"module"}