{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Button } from 'baseui/button';\nimport { Modal, ModalHeader, ModalBody } from 'baseui/modal';\nimport { FlexGrid, FlexGridItem } from 'baseui/flex-grid';\nimport { FormControl } from 'baseui/form-control';\nimport { Input } from 'baseui/input';\nimport { Textarea } from 'baseui/textarea';\nimport { Select } from 'baseui/select';\n\nconst AddEditModal = ({\n  error,\n  article,\n  visible,\n  editState,\n  statusOptions,\n  handleOnChange,\n  handleOnSubmit,\n  handleModdalClose\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    onClose: handleModdalClose,\n    closeable: true,\n    isOpen: visible,\n    animate: true,\n    size: \"default\",\n    role: \"dialog\",\n    unstable_ModalBackdropScroll: true,\n    overrides: {\n      Root: {\n        style: () => {\n          return {\n            zIndex: 9999\n          };\n        }\n      }\n    }\n  }, __jsx(ModalHeader, null, editState ? 'Update Article' : 'Add Article'), __jsx(ModalBody, {\n    style: {\n      overflow: 'hidden'\n    }\n  }, __jsx(FlexGrid, {\n    flexGridColumnCount: 1\n  }, __jsx(FlexGridItem, null, __jsx(FormControl, {\n    label: \"Title\",\n    error: error && !article.title ? 'Please fill out title' : null,\n    overrides: {\n      Label: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font200);\n        }\n      }\n    }\n  }, __jsx(Input, {\n    name: \"title\",\n    value: article.title,\n    error: error && !article.title,\n    onChange: handleOnChange('title'),\n    overrides: {\n      InputContainer: {\n        style: () => {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(FlexGridItem, null, __jsx(FormControl, {\n    label: \"Description\",\n    error: error && !article.description ? 'Please fill out description' : null,\n    overrides: {\n      Label: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font200);\n        }\n      }\n    }\n  }, __jsx(Textarea, {\n    value: article.description,\n    onChange: handleOnChange('description'),\n    error: error && !article.description,\n    overrides: {\n      InputContainer: {\n        style: () => {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(FlexGridItem, null, __jsx(FormControl, {\n    label: \"Slug\",\n    error: error && !article.slug ? 'Please fill out slug' : null,\n    overrides: {\n      Label: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font200);\n        }\n      }\n    }\n  }, __jsx(Input, {\n    value: article.slug,\n    onChange: handleOnChange('slug'),\n    error: error && !article.slug,\n    overrides: {\n      InputContainer: {\n        style: () => {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(FlexGridItem, null, __jsx(FormControl, {\n    label: \"Status\",\n    error: error && !article.status.length ? 'Please choose a status option' : null,\n    overrides: {\n      Label: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font200);\n        }\n      }\n    }\n  }, __jsx(Select, {\n    options: statusOptions,\n    placeholder: \"\",\n    value: article.status,\n    error: error && !article.status.length,\n    onChange: handleOnChange('status'),\n    overrides: {\n      ControlContainer: {\n        style: () => {\n          return {\n            backgroundColor: 'transparent'\n          };\n        }\n      }\n    }\n  }))), __jsx(FlexGridItem, {\n    overrides: {\n      Block: {\n        style: {\n          marginTop: '30px'\n        }\n      }\n    }\n  }, __jsx(Button, {\n    onClick: handleOnSubmit,\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font250);\n        }\n      }\n    }\n  }, editState ? 'Update Article' : 'Add Article'), __jsx(Button, {\n    kind: \"minimal\",\n    onClick: handleModdalClose,\n    overrides: {\n      BaseButton: {\n        style: ({\n          $theme\n        }) => {\n          return _objectSpread({}, $theme.typography.font250);\n        }\n      }\n    }\n  }, \"Cancel\"))))));\n};\n\nexport default AddEditModal;","map":null,"metadata":{},"sourceType":"module"}