{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Formik } from 'formik';\nimport { Button } from 'baseui/button';\nimport { Block } from 'baseui/block';\nimport FormikFormControl from './FormikFormControl';\nimport Field from './Field';\nimport { dataSchema, uiSchema } from './schemas';\n\nfunction Form({\n  initialValues,\n  dataSchema,\n  uiSchema,\n  onSubmit\n}) {\n  const {\n    fields: fieldsData\n  } = dataSchema;\n  const {\n    sections\n  } = uiSchema;\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validate: values => validateDataSchema({\n      values,\n      dataSchema\n    }),\n    validateOnBlur: false,\n    validateOnChange: false\n  }, ({\n    handleSubmit,\n    values,\n    touched\n  }) => {\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, sections.map(section => {\n      const {\n        title,\n        fields\n      } = section;\n      return __jsx(Block, {\n        key: title\n      }, fields.map(fieldName => {\n        const field = fieldsData[fieldName];\n\n        if (!field) {\n          throw new Error('Wrong field name in ui schema');\n        }\n\n        if (!areFieldConditionsFulfilled({\n          values,\n          field\n        })) {\n          return null;\n        }\n\n        return __jsx(FormikFormControl, {\n          key: fieldName,\n          name: fieldName,\n          label: field.label,\n          caption: field.caption\n        }, __jsx(Field, {\n          field: field,\n          name: fieldName\n        }));\n      }));\n    }), __jsx(Button, {\n      type: \"submit\"\n    }, \"Submit\"));\n  });\n}\n\nfunction validateDataSchema({\n  values,\n  dataSchema\n}) {\n  const {\n    fields\n  } = dataSchema;\n  let errors = {};\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName];\n\n    if (!field.required) {\n      return;\n    }\n\n    if (areFieldConditionsFulfilled({\n      values,\n      field\n    })) {\n      const value = getFieldValue({\n        name: fieldName,\n        field,\n        values\n      }); // this check should depend on the field type\n\n      if (value === undefined || values === '' || value === null) {\n        errors[fieldName] = `Field \"${fieldName}\" is required`;\n      }\n    }\n  });\n  console.log('errors', errors);\n  return errors;\n}\n\nconst areFieldConditionsFulfilled = ({\n  values,\n  field\n}) => {\n  const {\n    condition\n  } = field;\n\n  if (!condition || condition.rules.length === 0) {\n    return true;\n  }\n\n  const {\n    rules,\n    operator\n  } = condition;\n  let areRulesRespected = true;\n  let i = 0;\n\n  while (areRulesRespected && i < rules.length) {\n    const {\n      field: fieldName,\n      value\n    } = rules[i];\n    const fieldValue = getFieldValue({\n      name: fieldName,\n      field,\n      values\n    });\n    const isRuleRespected = fieldValue === value;\n    areRulesRespected = operator === 'AND' ? areRulesRespected && isRuleRespected : areRulesRespected || isRuleRespected;\n    i++;\n  }\n\n  return areRulesRespected;\n};\n\nconst getFieldValue = ({\n  name,\n  field,\n  values\n}) => {\n  if (values[name] === undefined) {\n    return undefined;\n  }\n\n  switch (field.type) {\n    case 'text':\n    case 'textarea':\n    case 'integer':\n    case 'checkbox':\n    case 'radio':\n    case 'date':\n      return values[name];\n\n    case 'select':\n      return values[name].values;\n  }\n};\n\nexport default function ExampleFormFormik() {\n  return __jsx(Form, {\n    initialValues: {\n      name: '',\n      email: '',\n      dateOfBirth: '',\n      favoriteColor: [],\n      aboutYourself: '',\n      radioGroup: '',\n      profileStatus: ''\n    },\n    dataSchema: dataSchema,\n    uiSchema: uiSchema,\n    onSubmit: values => alert(JSON.stringify(values, null, 4))\n  });\n}","map":null,"metadata":{},"sourceType":"module"}